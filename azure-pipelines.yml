# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    Python37-ubuntu:
      python.version: '3.7'
      imageName: 'ubuntu-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_linux-64'
    Python37-Windows:
      python.version: '3.7'
      imageName: 'windows-latest'
      conda.channel: 'msys2'
      conda.compiler: 'm2w64-toolchain'
    Python37-MacOS:
      python.version: '3.7'
      imageName: 'macos-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_osx-64'
    Python27-ubuntu:
      python.version: '2.7'
      imageName: 'ubuntu-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_linux-64'
    Python27-Windows:
      python.version: '2.7'
      imageName: 'windows-latest'
      conda.channel: 'msys2'
      conda.compiler: 'm2w64-toolchain'
    Python27-MacOS:
      python.version: '2.7'
      imageName: 'macos-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_osx-64'

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- bash: sudo apt-get -y install gcc gfortran libgsl-dev
  displayName: 'Install compilers and libraries on ubuntu'
  condition: eq(variables.imageName, 'ubuntu-latest')

  # Taken from numpy azure-pipelines.yml
- script: |
    /bin/bash -c "sudo xcode-select -s /Applications/Xcode_10.app/Contents/Developer"
    brew install gcc49 gsl
    # manually link critical gfortran libraries
    ln -s /usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9/libgfortran.3.dylib /usr/local/lib/libgfortran.3.dylib
    ln -s /usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9/libquadmath.0.dylib /usr/local/lib/libquadmath.0.dylib
    ln -s /usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9/libgfortran.a /usr/local/lib/libgfortran.a
    ln -s /usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9/libquadmath.a /usr/local/lib/libquadmath.a
    # manually symlink gfortran-4.9 to plain gfortran
    # for f2py
    ln -s /usr/local/bin/gfortran-4.9 /usr/local/bin/gfortran
    ls /usr/local/Cellar/gsl/2.6/ | echo
  displayName: 'Install compilers and libraries on mac'
  condition: eq(variables.imageName, 'macos-latest')

- script: |
    choco install cygwin --params="/InstallDir:$(System.Workfolder)\cygwin"
    $(System.Workfolder)\cygwin\setup-x86_64.exe -qnNdO -R "$(System.Workfolder)\cygwin" -s "http://cygwin.mirror.constant.com" -g -P ^
    gcc-fortran,^
    gsl
    set PATH=$(System.Workfolder)\cygwin\bin;%PATH%
    set GSL_HEADER_DIRECTORY=$(System.Workfolder)\cygwin\include
    set GSL_LIBRARY_DIRECTORY=$(System.Workfolder)\cygwin\lib
  displayName: 'Install compilers and libraries on windows'
  condition: eq(variables.imageName, 'windows-latest')

- script: |
    pip --no-cache-dir install -r requirements.txt
    pip --no-cache-dir --verbose install .
  displayName: 'Install dependencies and package'

- script: |
    pip install -r requirements-dev.txt
    python -m pytest -v --cov sensory_integration_time --junitxml=junit/test-results.xml --cov-report xml --cov-report term --cov-report html .
  displayName: 'pytest'
  condition: succeeded()

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/test-*.xml"
    testRunTitle: "Publish test results for Python $(python.version) and OS $(imageName)"
    mergeTestResults: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.xml"
    reportDirectory: "$(System.DefaultWorkingDirectory)/**/htmlcov"