# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    Python37-ubuntu:
      python.version: '3.7'
      imageName: 'ubuntu-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_linux-64'
    Python37-Windows:
      python.version: '3.7'
      imageName: 'windows-latest'
      conda.channel: 'msys2'
      conda.compiler: 'm2w64-toolchain'
    Python37-MacOS:
      python.version: '3.7'
      imageName: 'macos-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_osx-64'
    Python27-ubuntu:
      python.version: '2.7'
      imageName: 'ubuntu-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_linux-64'
    Python27-Windows:
      python.version: '2.7'
      imageName: 'windows-latest'
      conda.channel: 'msys2'
      conda.compiler: 'm2w64-toolchain'
    Python27-MacOS:
      python.version: '2.7'
      imageName: 'macos-latest'
      conda.channel: 'anaconda'
      conda.compiler: 'gfortran_osx-64'

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- bash: echo "##vso[task.prependpath]$CONDA/bin"
  displayName: 'Add conda to PATH on unix'
  condition: ne(variables.imageName, 'windows-latest')

# On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# We need to take ownership if we want to update conda or install packages globally
- bash: sudo chown -R $USER $CONDA
  displayName: 'Take ownership of conda installation'
  condition: eq(variables.imageName, 'macos-latest')

- powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
  displayName: 'Add conda to PATH on windows'
  condition: eq(variables.imageName, 'windows-latest')

- bash: |
    conda update --yes conda
    conda create --yes --name test_env gsl
  displayName: 'Create Anaconda environment with GSL libraries and gfortran'

- bash: |
    source activate test_env
    pip --no-cache-dir --verbose install -r requirements.txt
    if [[ $(imageName) == 'windows-latest' ]]
    then
      set GSL_HEADER_DIRECTORY=$CONDA_PREFIX\\include
      set GSL_LIBRARY_DIRECTORY=$CONDA_PREFIX\\lib
    else
      export GSL_HEADER_DIRECTORY=$CONDA_PREFIX/include
      export GSL_LIBRARY_DIRECTORY=$CONDA_PREFIX/lib
    fi
    pip --no-cache-dir --verbose install .
  displayName: 'Install dependencies and package'

- bash: |
    source activate test_env
    pip install -r requirements-dev.txt
    python -m pytest -v --cov sensory_integration_time --junitxml=junit/test-results.xml --cov-report xml --cov-report term --cov-report html .
  displayName: 'pytest'
  condition: succeeded()

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/test-*.xml"
    testRunTitle: "Publish test results for Python $(python.version) and OS $(imageName)"
    mergeTestResults: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.xml"
    reportDirectory: "$(System.DefaultWorkingDirectory)/**/htmlcov"